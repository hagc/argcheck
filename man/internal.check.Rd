% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check.R
\name{internal.check}
\alias{internal.check}
\alias{.check_classes}
\alias{.check_labels}
\alias{.check_value}
\alias{.check_length}
\alias{.check_additional_arguments}
\title{Validity of functions' arguments.}
\usage{
.check_classes(x, ..., message)

.check_labels(x, ..., message)

.check_value(x, ..., operator = "==", message)

.check_length(x, ..., operator = "==", message)

.check_additional_arguments(..., add, message)
}
\arguments{
\item{x}{One or more aceptable conditions}

\item{...}{arguments to be checked.}

\item{message}{(optional) character. Message to print out if the test fails. If missing, a general message is used.}

\item{operator}{character. Logical operator ("==", "!=", "<", ">", "<=", or ">=" ) for comparison to value or length}

\item{add}{Acceptable additional arguments.}
}
\value{
Error message if the test fails.
}
\description{
Internal functions to be called from within another functions (see details).
}
\details{
\code{.check_classes} tests if the arguments passed to functions comply with their expected classes.

\code{.check_labels} tests if the character arguments passed to functions comply with their expected content.

\code{.check_value} tests if the numeric arguments passed to functions comply with their expected value.

\code{.check_length} tests if the arguments passed to functions comply with their expected length.

\code{.check_additional_arguments} tests if the additional arguments passed to functions match acceptable arguments.
This function only checks if the name of the argument is expected. It does not check if it is valid.
}
\examples{
### .check_classes
argcheck:::.check_classes("character", "a")                 # no error found
argcheck:::.check_classes(c("character","list"), "a", "a")  # no error found
argcheck:::.check_classes(c("character","list"), list("a")) # no error found
\dontrun{
argcheck:::.check_classes("character", list("a"))           # error (not a character)
}

fun<-function(x){
  argcheck:::.check_classes("numeric",x)
  print(x+1)
}
fun(1)      # no error found
\dontrun{
fun("a")    # error (not numeric)
}


### .check_labels
a<-c("a","b","c")
b<-c("a","b","d")
argcheck:::.check_labels(a,a)
argcheck:::.check_labels(a,a[1:2])
argcheck:::.check_labels(a,a,a)
\dontrun{
argcheck:::.check_labels(a,b)
}


### .check_length
argcheck:::.check_length(1,"a")
argcheck:::.check_length(1,2)
argcheck:::.check_length(2,c("a","b"))
argcheck:::.check_length(2,c("a","b"), operator="<=")
\dontrun{
argcheck:::.check_length(3,c("a","b"))
argcheck:::.check_length(3,c("a","b"), operator=">", message="the length should be larger than 3")
}

### .check_additional_arguments
f<-function(...){
  argcheck:::.check_additional_arguments(..., "add")
}
f(add="whatever")
\dontrun{
f(wrong_argument="whatever")
}

}
\keyword{internal}
